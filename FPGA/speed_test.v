module speed_test  #(parameter B1 = 1920)
(
    input wire clk,          // 30.72 –ú–ì—Ü
	input wire clk_hh,       // 276.48 –ú–ì—Ü
    input wire reset,        // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±—Ä–æ—Å
    input wire p1,           // –?–º–ø—É–ª—å—Å —É–≤–µ–ª–∏—á–µ–Ω–∏—è (276.48 –ú–ì—Ü, 1 —Ç–∞–∫—Ç)
    input wire p2,           // –?–º–ø—É–ª—å—Å —É–º–µ–Ω—å—à–µ–Ω–∏—è (276.48 –ú–ì—Ü, 1 —Ç–∞–∫—Ç)
    output reg [17:0] d1_out,// –í—ã—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    output reg valid_out,     // –°–∏–≥–Ω–∞–ª –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
	output wire p1_rise,
	output wire p2_rise
);

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
//parameter B1 = 1;            // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
localparam TIMER_MAX = 16'd30719; // 1 –º—Å –ø—Ä–∏ 30.72 –ú–ì—Ü (30720 —Ç–∞–∫—Ç–æ–≤)

// –†–µ–≥–∏—Å—Ç—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (3 —Å—Ç—É–ø–µ–Ω–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
reg [2:0] p1_sync_reg = 3'b0;
reg [2:0] p2_sync_reg = 3'b0;
reg p1_prev, p2_prev;



reg [3:0]	count_dtct_p1;
reg         p1_dtct;

 always @(posedge clk_hh) begin
 	if(reset)
 		p1_dtct <= 1'b0;
 	else if(p1)
 		p1_dtct <= 1'b1;
 	else if(count_dtct_p1 == 4'd8)
 		p1_dtct <= 1'b0;
 end

 always @(posedge clk_hh) begin
 	if(reset)
 		count_dtct_p1 <= 4'd0;
 	else if(count_dtct_p1 == 4'd8)
 		count_dtct_p1 <= 4'd0;
 	else if(p1 || p1_dtct)
 		count_dtct_p1 <= count_dtct_p1 + 4'd1;
 end

reg [3:0]	count_dtct_p2;
reg         p2_dtct;

 always @(posedge clk_hh) begin
 	if(reset)
 		p2_dtct <= 1'b0;
 	else if(p2)
 		p2_dtct <= 1'b1;
 	else if(count_dtct_p2 == 4'd8)
 		p2_dtct <= 1'b0;
 end

 always @(posedge clk_hh) begin
 	if(reset)
 		count_dtct_p2 <= 4'd0;
 	else if(count_dtct_p2 == 4'd8)
 		count_dtct_p2 <= 4'd0;
 	else if(p2 || p2_dtct)
 		count_dtct_p2 <= count_dtct_p2 + 4'd1;
 end




// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–º–ø—É–ª—å—Å–æ–≤ –∏–∑ –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
always @(posedge clk) begin
    if (reset) begin
        p1_sync_reg <= 3'b0;
        p2_sync_reg <= 3'b0;
    end else begin
        // –¶–µ–ø–æ—á–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è p1
        p1_sync_reg <= {p1_sync_reg[1:0], p1};
        
        // –¶–µ–ø–æ—á–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è p2
        p2_sync_reg <= {p2_sync_reg[1:0], p2};
    end
    p1_prev <= p1_dtct;//p1_sync_reg[1];
    p2_prev <= p2_dtct;
end

// –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
assign p1_rise = ~p1_prev & p1_dtct;
assign p2_rise = ~p2_prev & p2_dtct;

// –°—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä
reg [15:0] timer = 0;
reg [17:0] accumulator = 0;

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
always @(posedge clk) begin
    if (reset) begin
        timer <= 0;
        accumulator <= 0;
        d1_out <= 0;
        valid_out <= 0;
    end else begin
        // –°—á–µ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏
        timer <= (timer == TIMER_MAX) ? 0 : timer + 1;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø—É–ª—å—Å–æ–≤
        case (p1_rise && ~p2_rise)
            1'b1: accumulator <= accumulator + B1;  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ
            //2'b01: accumulator <= accumulator - B1;  // –£–º–µ–Ω—å—à–µ–Ω–∏–µ
            default: ; // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        endcase
        
        // –§–∏–∫—Å–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫–æ–Ω—Ü–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if (timer == TIMER_MAX) begin
            d1_out <= accumulator;
            valid_out <= 1;
            accumulator <= 0;  // –°–±—Ä–æ—Å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞
        end else begin
            valid_out <= 0;
        end
    end
end

endmodule